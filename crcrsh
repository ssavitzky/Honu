#!/usr/bin/expect -f
#	$Id: crcrsh,v 1.4 1999-06-28 02:32:05 steve Exp $ -*-tcl-*-
#	crcrsh host command...
#	export CVS_RSH=crcrsh ; cvs update

# This is stupid, but I don't know how to deal with associative arrays

set user [exec /bin/sh -c "echo \$USER"]
set home [exec /bin/sh -c "echo \$HOME"]

set host [lrange $argv 0 0]
#set cmd  [lrange $argv 1 end]
set cmd [lindex $argv 1]

set pass [exec /bin/grep $host "$home/.netrc" ]
regexp {password [\" ]*([^\"]+)\"?} $pass foo password

if [string match $password ""] then {
   send_error "no password for $host in $home/.netrc\n"
   exit 1
}
if [string match $cmd ""] then {
  send_error "rlogin to $host\n"
} else {
  send_error "on $host execute $cmd\n"
  log_user 0
  log_file -noappend "$home/.crcrsh.log"
}

# Telnet to the gateway and log in:
spawn -noecho telnet -8 gateway.crc.ricoh.com
expect {
  -timeout 400 
  login: {
    send "$user\r"
  } incorrect {
    send_error "you lose: permission denied\n"
    exit 1
  } timeout {
    send_error "Timeout in first-level chat\n"
    exit 1
  }
}

# Get the s/key index out of the prompt, and send it.
expect -re "s\/key (\[0-9\]+)" {
    set key "$expect_out(1,string)"
    send_error "using skey: $key\n"
    set skey [exec /bin/grep $key $home/.skeys]
    set skey [lrange $skey 1 end]
}
expect ssword: {
    send_error "Sending skey password\n"
    send "$skey\r"
}

# Now connect to the host we _really_ want, and log in on _it_
expect {
  -timeout 100
  "termserv>" {			# FreeBSD
    if [string match $host ""] { 
       interact
       exit 0
    }
    send "telnet $host\r"
    exp_continue
  } ">" {			# Gauntlet
    send "connect $host\r"
    exp_continue
  } ogin: {
    send_error "sending username\n"
    send "$user\n"
    exp_continue
  } assword: {
    send_error "sending password\n"
    send "$password\n"
  } timeout {
    send_error "Timeout in second-level telnet"
    exit 1
  }
}

# OK, we're talking.  Run the program, if specified, then interact.
send_error "Connection established\n"
stty cooked
if [string match $cmd ""] then {
  interact
} else { 
  expect -timeout 20 "> " #{
    #sleep 1
    # The following line seems to have no effect:  interact is setting raw
    #stty -echo raw 
    send "stty -echo raw\r"
    # the following line makes it hang even though it gets the "> ".
    #expect "> " {}
    #sleep 1
    send "$cmd\n"
    interact -reset
  #}
  #stty -echo raw
  #send "stty -echo; $cmd\r"
  #send "$cmd\r"

  #expect "$cmd\r\n" {
    send_error "Command $cmd sent\n"
    #sleep 1
  #}
  stty cooked
}




